@page
@model MethodicalInstructions.Pages.Sessions.RequirementsModel
@{
    ViewData["Title"] = "Требования и рекомендации";
}
<section class="requirements-grid">
    <h2>Требования и рекомендации</h2>
    <h3>Введение</h3>
    <p>
        Для выполнения задач вы можете использовать любые инструменты, предоставляемые согласно инфраструктурному листу.
        В случае нехватки времени для выполнения всех оставшихся задач вы можете пропускать выполнение некоторых задач в пользу других. Однако ожидается, что вы предоставите максимально завершенную работу в конце каждой сессии, чтобы облегчить оценку вашей работы.
    </p>
    <h3>Правила</h3>
    <p>
        Во время чемпионата необходимо соблюдать следующие правила:
        <ul>
            <li>Запрещен доступ в Интернет (кроме одноразового доступа в течение сессии не более 15 минут за всю сессию);</li>
            <li>Запрещено использование любых гаджетов (мобильный телефон, планшет, смарт-часы, шлемы виртуальной реальности и т.д.);</li>
            <li>Запрещено использование ваших собственных устройств хранения данных (USB-накопители, жесткие диски и т.д.);</li>
            <li>Запрещено общение с другими участниками и экспертами чемпионата;</li>
            <li>Запрещено приносить на экзамен книги, заметки и т.д.;</li>
            <li>
                Разрешено использовать личные устройства ввода информации (клавиатура, мышь, трекбол и т.д.), но эти устройства должны быть:
                <ul>
                    <li>проводными,</li>
                    <li>непрограммируемыми,</li>
                    <li>должны работать без дополнительной установки драйверов (эти требования предварительно проверяются техническим экспертом).</li>
                </ul>
            </li>
        </ul>
        Несоблюдение этих правил может привести к удалению с площадки проведения.
    </p>
    <h3>Название приложения</h3>
    <p>Используйте соответствующие названия для ваших приложений и файлов.</p>
    <h3>Файловая структура</h3>
    <p>Файловая структура проекта должна отражать логику, заложенную в приложение. Например, все формы содержатся в одной директории, пользовательские визуальные компоненты – в другой, классы сущностей – в третьей.</p>
    <h3>Структура проекта</h3>
    <p>
        Каждая сущность должна быть представлена в программе как минимум одним отдельным классом. Классы должны быть небольшими, понятными и выполнять одну единственную функцию (Single responsibility principle).
        Для работы с разными сущностями используйте разные формы, где это уместно.
    </p>
    <h3>Руководство по стилю</h3>
    <p>
        Визуальные компоненты должны соответствовать макету. Обеспечьте соблюдение требований всех компонентов в следующих областях:
        <ul>
            <li>цветовая схема,</li>
            <li>размещение логотипа,</li>
            <li>установка иконки приложения.</li>
        </ul>
        <table>
            <tr>
                <th>Основные цвета</th>
            </tr>
            <tr>
                <td>Фирменный зелёный</td>
                <td>#78B24B</td>
            </tr>
            <tr>
                <td>Ярко-зеленый</td>
                <td>#89FC43</td>
            </tr>
            <tr>
                <td>Желтый</td>
                <td>#F8FC43</td>
            </tr>
            <tr>
                <td>Красный</td>
                <td>#FC4343</td>
            </tr>
        </table>
    </p>
    <h3>Макет и технические характеристики</h3>
    <p>Все компоненты системы должны иметь единый согласованный внешний вид, соответствующий руководству по стилю, а также следующим требованиям: </p>
    <ul>
        <li>разметка и дизайн (предпочтение отдается масштабируемой компоновке; должно присутствовать ограничение на минимальный размер окна; должна присутствовать возможность изменения размеров окна, где это необходимо; увеличение размеров окна должно увеличивать размер контентной части, например, таблицы с данными из БД);</li>
        <li>группировка элементов (в логические категории);</li>
        <li>использование соответствующих элементов управления (например, выпадающих списков для отображения подстановочных значений из базы данных, datepicker для дат и тп);</li>
        <li>расположение и выравнивание элементов (метки, поля для ввода и т.д.);</li>
        <li>последовательный переход фокуса по элементам интерфейса (по нажатию клавиши TAB);</li>
        <li>общая компоновка логична, понятна и проста в использовании;</li>
        <li>последовательный пользовательский интерфейс, позволяющий перемещаться между существующими окнами в приложении (в том числе обратно, например, с помощью кнопки «Назад»);</li>
        <li>соответствующий заголовок на каждом окне приложения (не должно быть значений по умолчанию типа MainWindow, Form1 и тп).</li>
    </ul>
    <p>
        У всех диаграмм и графиков приложения должна быть добавлена легенда.
        Для оформления кнопок-действий пользователя можно использовать смайлики (emoji) из Windows (Win + .).  Например, использовать смайлик карандашика, сохранения и тд.
        Все предоставленные макеты являются лишь примером и рекомендациями к расположению элементов – нет необходимости следовать им «попиксельно».
    </p>
    <h3>Обратная связь с пользователем</h3>
    <p>
        Уведомляйте пользователя о совершаемых им ошибках или о запрещенных в рамках задания действиях, запрашивайте подтверждение перед удалением, предупреждайте о неотвратимых операциях, информируйте об отсутствии результатов поиска и т.п. Окна сообщений соответствующих типов (например, ошибка, предупреждение, информация) должны отображаться с соответствующим заголовком и пиктограммой. Текст сообщения должен быть полезным и информативным, содержать полную информацию о совершенных ошибках пользователя и порядок действий для их исправления. Также можно использовать визуальные подсказки для пользователя при вводе данных.
    </p>
    <h3>Обработка ошибок</h3>
    <p>
        Не позволяйте пользователю вводить некорректные значения в текстовые поля сущностей. Например, в случае несоответствия типа данных или размера поля введенному значению. Оповестите пользователя о совершенной им ошибке.<br>
        Обратите внимание на использование абсолютных и относительных путей к изображениям. Приложение должно корректно работать в том числе и при перемещении папки с исполняемым файлом.<br>
        При возникновении непредвиденной ошибки приложение не должно аварийно завершать работу.
    </p>
    <h3>Оформление кода</h3>
    <p>
        Идентификаторы переменных, методов и классов должны отражать суть и/или цель их использования, в том числе и наименования элементов управления (например, не должно быть значений по умолчанию типа Form1, button3).<br>
        Идентификаторы должны соответствовать соглашению об именовании (Code Convention) и стилю CamelCase (для C#, Java) и snake_case (для Python).<br>
        Допустимо использование не более одной команды в строке.
    </p>
    <h3>Комментарии</h3>
    <p>
        Используйте комментарии для пояснения неочевидных фрагментов кода.<br>
        Хороший код воспринимается как обычный текст. Не используйте комментарии для пояснения очевидных действий. Комментарии должны присутствовать только в местах, которые требуют дополнительного пояснения.<br>
        Используйте тип комментариев, который в дальнейшем позволит сгенерировать XML-документацию, с соответствующими тегами (например, param, return(s), summary и др.).
    </p>
    <h3>Оценка</h3>
    <p>
        Каждая задача оценивается путем тестирования реализации требуемого функционала. Так как требования к реализуемой системе очень высоки, возможно, будут использоваться средства для автоматизированного тестирования приложения. В связи с этим, в ходе разработки, может возникнуть необходимость следовать определенным правилам именования и структурирования проекта.
    </p>
    <h3>Предоставление результатов</h3>
    <p>
        Все практические результаты должны быть переданы путем загрузки файлов в предоставленную систему контроля версий git. Для сохранения данных по результатам проектирования (диаграммы, текстовые документы или сценарии тестирования) создайте репозиторий Designing и загружайте туда файлы с каждой сессии. Для сохранения исходного кода проекта(-ов) вы можете создавать дополнительные необходимые репозитории.<br><br>
        Практическими результатами работы являются:
        <ul>
            <li>исходный код приложения (в виде коммита текущей версии проекта, но не архивом),</li>
            <li>прочие графические/текстовые файлы.</li>
        </ul>
        При создании коммитов используйте содержательные и понятные комментарии.<br><br>
        Для оценки работы будет учитываться только содержимое репозитория. При оценке рассматриваются заметки только в электронном виде (readme.md). Рукописные примечания не будут использоваться для оценки.<br><br>
        Репозиторий обязательно должен содержать описание в формате Markdown (см. шаблон в файле README-Template_rus.md). Заполните дополнительную информацию о проекте и способе запуска приложения в файле readme.md, а также о выполненной работе в рамках каждой сессии.<br><br>
        Обратите внимание, что дополнительного времени после окончания сессии на сохранение не предусмотрено, поэтому будьте бдительны и загружайте результаты работ своевременно в рамках сессии.
    </p>
    <h3>Взаимодействие через API</h3>
    <p>
        Разрабатываемый продукт должен быть реализован с помощью двух разных проектов: клиентская и серверная части. Серверная часть должна быть напрямую связана с базой данных, а также содержать в себе нужные конечные точки (endpoints) для запросов с клиентской части посредством HTTP. Клиентское приложение, в свою очередь, не должно быть связано с базой данных напрямую: получать и отправлять нужные данные следует через запросы в серверной части. Взаимодействие через HTTP должно быть осуществлено следуя архитектуре REST.<br><br>
        Клиентская часть при работе с API должна учитывать возможные проблемы с интернет-соединением, а также прочие ошибки на стороне сервера. В случае ошибок при запросах к серверу, приложение должно информировать о них пользователя, а также дополнительно указывать техническую информацию об ошибке.<br><br>
        Все методы серверной части, по мере их реализации в рамках всех сессий, должны быть задокументированы с помощью создания коллекции в приложении Postman и содержать в себе описание передаваемых параметров, а также примеры ответов от сервера (examples). В случае если вы не реализовали нужные методы на стороне сервера, то их необходимо спроектировать и добавить в postman-коллекцию.
    </p>
    <h3>Обновление UI без перезагрузки</h3>
    <p>
        В случае если пользователь меняет какие-либо данные в клиентском приложении, а измененные данные отображаются в какой-либо дополнительной части приложения, то необходимо, чтобы интерфейс приложения обновлялся везде. Например, если меняется иконка/название проекта, то после сохранения без перезагрузки приложения должен обновиться и список проектов (в меню).
    </p>
</section>
