@page
@{
    ViewData["Title"] = "Сессия 4";
}
<h1 class="text-center mt-4">Методические указания – Сессия 4</h1>
<p><strong>Тема:</strong> Проектирование экрана управления проектами средствами UML</p>

<h2>Модули в рамках сессии</h2>
<ul>
    <li>Модуль “Общей корпоративной информации”</li>
    <li>Модуль “Элементы управления”</li>
    <li>Модуль “Единая Библиотека корпоративных данных”</li>
</ul>

<h2>1. Разработка Web-приложения</h2>

<p>
    Необходимо создать веб-приложение, доступное по http, которое будет отображать публичную информацию об организации, основных событиях, новостях и сотрудниках.
    Данное приложение будет использоваться в качестве публичного портала для сотрудников компании. 
    ASP.NET MVC — это фреймворк для создания веб-приложений на основе паттерна MVC (Model-View-Controller). Он обеспечивает четкое разделение логики, данных и интерфейса.
    Model (Модель) - отвечает за данные и бизнес-логику.
    View (Представление) - это HTML-страница, которая отображает данные пользователю, пишется на Razor (синтаксис C# внутри HTML) и получает данные от Controller в виде модели.
    Controller (Контроллер) - обрабатывает HTTP-запросы (GET, POST и др.), взаимодействует с Model и загружает/сохраняет данные, после чего возвращает View или другие результаты (JSON, Redirect).
</p>

<div class="step">
    <h3>1.1. Добавление Razor-страницы</h3>
    <p>Реализовать Web-решение можно отдельным проектом, либо в API. В целом, разницы особой нет.</p>
    <p>Открываем проект <code>BusinessAPI</code>, добавляем Razor-страницу в папку <code>Views</code>. Создаем в ней папку <code>Index</code>.</p>
    <p>Называем страницу: <code>Index.cshtml</code>. Подключаем папку с моделями: <code>&#064;using API.Models</code>.</p>
    <p>Веб проект включает в себя:</p>
    <ul>
        <li>Блок поиска информации,</li>
        <li>Блок сотрудников, прокручиваемый влево-вправо,</li>
        <li>Блок новостей, получающие информацию из RSS-ленты,</li>
        <li>Блок событий.</li>
    </ul>
    <p>Код страницы будет выглядеть примерно как на рисунке 1:</p>
    <div class="screenshot">
        <img src="~/data/img/session4/index_page.png" alt="Страница Index">
        <p>Рис. 1. Код страницы Index</p>
    </div>
</div>

<div class="step">
    <h3>1.2. Реализация модели данных для страницы</h3>
    <p>
        По заданию, необходимо, чтобы данные были получены посредством API, поэтому класс <code>IndexModel</code>
        отправляет http-запросы, данные передаются в страницу, после чего, Razor-страница рендерит html с информацией.
    </p>
    <p>
        Добавьте класс в папку <code>Models</code>:
    </p>
    <pre><code>
    public class IndexModel : PageModel
    {
        private readonly HttpClient _httpClient;
        public List&lt;Employees&gt; Employees { get; set; } = new();
        public List&lt;News&gt; News { get; set; } = new();
        public List&lt;Events&gt; Events { get; set; }=new();
        public IndexModel(HttpClient httpClient) { _httpClient = httpClient; }
        public async Task OnGetAsync()
        {
            Employees = await GetApiData&lt;List&lt;Employees&gt;&gt;("api/v1/employees");
            News = await GetApiData&lt;List&lt;News&gt;&gt;("api/v1/news");
            Events = await GetApiData&lt;List&lt;Events&gt;&gt;("api/v1/events");
        }
        private async Task&lt;T&gt; GetApiData&lt;T&gt;(string endpoint)
        {
var response = await _httpClient.GetStringAsync(endpoint);
return JsonSerializer.Deserialize&lt;T&gt;(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;
        }
    }
    </code></pre>
</div>

<div class="step">
    <h3>1.3. Реализация контроллера</h3>
    <p>
        Для обработки запросов получения данных и возвращения <code>View</code>, напишем небольшой контроллер <code>IndexController</code> в папке <code>Controllers</code>.
    </p>
    <pre><code>
    public class IndexController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }
    </code></pre>
</div>

<div class="step">
    <h3>1.4. Реализация JavaScript кода</h3>
    <p>Вся остальная логика страницы будет прописана на <strong>JavaScript</strong>, в файле <code>wwwroot/js/site.js</code>.</p>
    <p>Осмотрим ее более детально, так как реализация Сессии 4 приносит большое количество баллов за выполнение задания:</p>
    <pre><code>
    // переменные
    let allEmployees = []; 
    let allNews = [];
    let allEvents = [];
    // Функция загрузки сотрудников
    function loadEmployees() {
        fetch("/api/v1/employees/web")
        .then(response => response.json())
        .then(data => {
            allEmployees = data;
            displayEmployees(data);
        });
    }

    // Функция загрузки новостей
    function loadNews() {
        fetch("/api/v1/news")
        .then(response => response.json())
        .then(data => {
            allNews = data;
            displayNews(data);
        });
    }

    // Функция загрузки событий
    function loadEvents() {
        fetch("/api/v1/events")
        .then(response => response.json())
        .then(data => {
            allEvents = data;
            displayEvents(data);
        });
    }

    function displayEmployees(employees) {
    const container = document.getElementById("employees-container");
    container.innerHTML = "";

    if (employees.length === 0) {
        container.innerHTML = '&lt;div class="no-results"&gt;Сотрудники не найдены&lt;/&lt;div&gt;';
        return;
    }

    employees.forEach(employee => {
        const div = document.createElement("div");
        div.classList.add("employee-card");
        div.innerHTML = `&lt;h3&gt;${escapeHtml(employee.fullName)}&lt;/&lt;h3&gt;
        &lt;p&gt;${escapeHtml(employee.name)}&lt;/p&gt;
        &lt;p&gt;${escapeHtml(employee.email)}&lt;/&lt;p&gt;
        &lt;p&gt;${escapeHtml(employee.workPhone)}&lt;/&lt;p&gt;
        &lt;p&gt;${escapeHtml(employee.birthdate)}&lt;/&lt;p&gt;
        &lt;button onclick="showQRCode('${escapeHtml(employee.fullName)}', 
        '${escapeHtml(employee.email)}', '${escapeHtml(employee.workPhone)}', 
        '${escapeHtml(employee.name)}', this)"&gt;💾&lt;/button&gt;`;
        container.appendChild(div);
        });
    }

    function displayNews(newsItems) {
        const container = document.getElementById("news-container");
        container.innerHTML = "";

        if (newsItems.length === 0) {
            container.innerHTML = '&lt;div class="no-results"&gt;Новости не найдены&lt;/&lt;div&gt;';
        return;
    }

    newsItems.forEach(news => {
        container.appendChild(createNewsElement(news));
        });
    }

    function displayEvents(events) {
        const container = document.getElementById("events-container");
        container.innerHTML = "";
        if (events.length === 0) {
            container.innerHTML = '&lt;div class="no-results"&gt;События не найдены&lt;/&lt;div&gt;';
        return;
    }
    events.forEach(event => {
        const div = document.createElement("div");
        div.classList.add("event-item");
        div.innerHTML = `&lt;h3&gt;${escapeHtml(event.name)}&lt;/&lt;h3&gt;
        &lt;p&gt;${escapeHtml(event.description)}&lt;/&lt;p&gt;
        &lt;p&gt;&lt;strong&gt;Дата:&lt;/strong&gt; ${escapeHtml(event.date)}&lt;/&lt;p&gt;
        &lt;p&gt;&lt;strong&gt;Автор:&lt;/&lt;strong&gt; ${escapeHtml(event.authorName)}&lt;/&lt;p&gt;
        &lt;button onclick="downloadCalendar(${event.id})"&gt;🗓️&lt;/&lt;button&gt;`;
        container.appendChild(div);
        });
    }
    </code></pre>

    <p>Функция для экранирования HTML выделена на отдельном рисунке 2:</p>
    <div class="screenshot">
        <img src="~/data/img/session4/function.png" alt="Функция экранирования HTML">
        <p>Рис. 2. Функция экранирования HTML</p>
    </div>

    <p>Продолжение кода: </p>
    <pre><code>
    document.addEventListener("DOMContentLoaded", function()) {
        loadEmployees();
        loadNews();
        loadEvents();
    }

    function createNewsElement(news) {
        const div = document.createElement("div");
        div.classList.add("news-tile");
        div.innerHTML = `
        &lt;div class="newsimg"&gt;&lt;img src="${news.image}"&gt;&lt;/&lt;div&gt;
        &lt;div class="news-content"&gt;
        &lt;h3&gt;${news.name}&lt;/&lt;h3&gt;
        &lt;p&gt;${news.description}&lt;/&lt;p&gt;
        &lt;p class="news-date"&gt;${news.date}&lt;/&lt;p&gt;
        &lt;/&lt;div&gt;`;
        return div;
    }

    setInterval(loadNews, 15000); // каждые 15 секунд новости берутся из RSS-ленты

    </code></pre>
    
    <div class="note">
        <p>
            Реализовать QR-код сотрудника, календарь событий и поиск будет возможность в <a asp-page="/Sessions/Session5">5 сессии</a>.
        </p>
    </div>
    <p>Убедитесь, что в <code>Program.cs</code> прописан маршрут до страницы <code>Index.cshtml</code> :</p>
    <pre>
        <code>
        app.MapControllers();
        app.MapControllerRoute(
            name: "default",
            pattern: "{controller=Index}/{action=Index}/{id?}");
        </code>
    </pre>
</div>

<div class="step">
    <h3>1.5. Отправка Web-приложения в систему контроля версий</h3>
    <p>Отправьте Web-приложение в систему контроля версий через инструменты в <strong>Visual Studio 2022</strong>, или через командную строку, убедившись, что запускаете ее в корне папки приложения:</p>
    <pre>
    <code>
            git add .
            git commit -m "Add Web-project (Session 4)"
            git push -u origin master
        </code>
    </pre>
    <div class="note">
        <p>С Web-проектом из сессии 4 можно ознакомиться в готовом проекте <a asp-page="/Sessions/Session6">ознакомьтесь с готовым материалом</a> в конце страницы.</p>
    </div>
</div>